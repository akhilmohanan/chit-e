{"version":3,"sources":["constants/environment.ts","pages/login/login.style.ts","pages/login/login.tsx","App.tsx","serviceWorker.ts","sample-data.ts","index.tsx","store/store.ts","store/reducers.ts","constants/typs.ts"],"names":["GOOGLE_CLINT_ID","process","LoginStyle","styled","div","Login","responseGoogle","res","console","log","failGoogle","err","className","clientId","buttonText","onSuccess","this","onFailure","cookiePolicy","Component","App","props","history","exact","path","component","Boolean","window","location","hostname","match","name","storeProcedure","createHistory","reducersObj","actionTypes","actionArray","map","actionType","initialState","state","action","type","payload","pagination","actionObject","forEach","item","reducers","sampleData","routeMiddleware","routerMiddleware","middlewares","thunk","appReducer","combineReducers","router","connectRouter","createStore","applyMiddleware","store","getStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTACaA,EAAkBC,0HAAYD,iBAAmB,G,uaCCvD,IAAME,E,MAAaC,EAAOC,IAAV,KCwCRC,E,4MAlCXC,eAAiB,SAACC,GACdC,QAAQC,IAAIF,I,EAIhBG,WAAa,SAACC,GACVH,QAAQC,IAAIE,I,uDAKZ,OACI,kBAACT,EAAD,KACI,yBAAKU,UAAU,UACX,0CACA,yBAAKA,UAAU,qBACf,kBAAC,cAAD,CACIC,SAAUb,EACVc,WAAW,QACXC,UAAWC,KAAKV,eAChBW,UAAWD,KAAKN,WAChBQ,aAAc,8B,GAvBlBC,aCkBLC,MAff,SAAaC,GAEX,IAAMC,EAAkCD,EAAMC,QAE9C,OACE,yBAAKV,UAAU,OACb,kBAAC,IAAD,CAAiBU,QAASA,GACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,QCLvBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+DClBS,EACF,CACL,CAACC,KAAM,UCQTC,EAAiB,I,iDCarBV,QAAkCW,c,uDAIhC,IAAMC,EC3BK,SAAiBC,GAC5B,IAAMC,EAAcD,EAAYE,KAAI,SAACC,GACnC,IAAMC,EAAoBD,EAAWC,aACjCD,EAAWC,aACX,GACJ,OAAO,eACJD,EAAWP,MAAO,WAGP,IAFVS,EAES,uDAFQD,EACjBE,EACS,uCACT,OAAQA,EAAOC,MACb,KAAKJ,EAAWP,KACd,OAAKU,EAAOE,QAEFL,EAAWM,WACb,GAAN,mBAAWL,GAAX,YAA4BE,EAAOE,UAE5B,eAAIH,EAAX,GAAqBC,EAAOE,SAJrB,GAMX,QACE,OAAO,eAAKH,UAKlBK,EAAe,GAInB,OAHAT,EAAYU,SAAQ,SAACC,GACnBF,EAAY,eAAQA,EAAR,GAAyBE,MAEhCF,EDFgCG,CAASC,GAE1CC,EAA8BC,YAAiBnC,KAAKM,SAEpD8B,EAA4B,CAChCC,IACAH,GAGII,EAAsBC,YAAgB,eACvCrB,EADsC,CAEzCsB,OAAQC,YAAczC,KAAKM,YAY7B,OAFcoC,aAPM,SAAClB,EAAYC,GAI/B,ME7CkB,cF0CdA,EAAOC,OACTF,EAAQ,CAACgB,OAAQhB,EAAMgB,SAElBF,EAAWd,EAAOC,KAGakB,IAAe,WAAf,EAAmBP,Q,MDrCzD9B,EAAkCU,EAAeV,QACjDsC,EAAQ5B,EAAe6B,WAE7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,CAAKtC,QAASA,MAGlB2C,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAMC,c","file":"static/js/main.5250705d.chunk.js","sourcesContent":["export const PUBLIC_URL = process.env.PUBLIC_URL || 'http://localhost:3000';\nexport const GOOGLE_CLINT_ID = process.env.GOOGLE_CLINT_ID || '';","import styled from 'styled-components';\n\nexport const LoginStyle = styled.div`\n    display: flex;\n    justify-content: center;\n    height: 100vh;\n\n    .wapper {\n        margin auto;\n    }\n\n    .social-media__box {\n        height: 50px;\n        display: flex;\n        width: 250px;\n        background: #eee;\n        border-radius: 10px;\n    }\n\n    img {\n        height: 40px;\n        margin: auto;\n    }\n`","import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nimport {GOOGLE_CLINT_ID} from './../../constants/environment';\nimport { LoginStyle } from './login.style';\n\nclass Login extends Component {\n\n    responseGoogle = (res: any) => {\n        console.log(res);\n        \n    }\n\n    failGoogle = (err: any) => {\n        console.log(err);\n        \n    }\n    \n    render() {\n        return (\n            <LoginStyle>\n                <div className=\"wapper\">\n                    <h1>Login with</h1>\n                    <div className=\"social-media__box\">\n                    <GoogleLogin\n                        clientId={GOOGLE_CLINT_ID}\n                        buttonText=\"Login\"\n                        onSuccess={this.responseGoogle}\n                        onFailure={this.failGoogle}\n                        cookiePolicy={'single_host_origin'}\n                    />\n                        {/* <img className=\"social-media_logo\" src={`${PUBLIC_URL}/images/google-logo.png`} alt=\"google\"/> */}\n                    </div>\n                </div>\n            </LoginStyle>\n            \n            \n        )\n    }\n\n}\n\nexport default Login;","import React from 'react';\nimport { History, LocationState } from 'history'\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Switch, Route } from 'react-router';\n\nimport './App.css';\nimport Login from './pages/login/login';\n\n\nfunction App(props: {history: History<LocationState>}) {\n\n  const history: History<LocationState> = props.history;\n\n  return (\n    <div className=\"App\">\n      <ConnectedRouter history={history}>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n        </Switch>\n      </ConnectedRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n    actions: [\n        {name: 'actio'}\n    ]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { History, LocationState } from 'history'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport StoreProcedure from './store/store'\n\nconst storeProcedure = new StoreProcedure;\nconst history: History<LocationState> = storeProcedure.history;\nconst store = storeProcedure.getStore(); \n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App history={history}/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import reducers from './reducers';\nimport {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  compose,\n  createStore,\n  Middleware,\n  Reducer,\n  ReducersMapObject,\n  Store\n  } from 'redux';\nimport { createBrowserHistory as createHistory, History, LocationState } from 'history';\nimport thunk from 'redux-thunk';\nimport { routerMiddleware, connectRouter } from 'connected-react-router'\n\nimport { IStoreProcedure } from './store.interface';\nimport dataModel from './../sample-data';\nimport { resetApp } from '../constants/typs';\nimport sampleData from './../sample-data'\n\nclass StoreProcedure implements IStoreProcedure {\n\n  history: History<LocationState> = createHistory();\n\n  getStore(): Store {\n\n    const reducersObj: ReducersMapObject = reducers(sampleData.actions);\n    \n    const routeMiddleware: Middleware = routerMiddleware(this.history);\n\n    const middlewares: Middleware[] = [\n      thunk,\n      routeMiddleware\n    ]\n  \n    const appReducer: Reducer = combineReducers({\n      ...reducersObj,\n      router: connectRouter(this.history) as Reducer\n    });\n\n    const rootReducer = (state: any, action: Action): Reducer => {\n      if (action.type === resetApp) {\n        state = {router: state.router}\n      }\n      return appReducer(state, action);\n    };\n  \n    const store = createStore( rootReducer, applyMiddleware(...middlewares) )\n      \n    return store;\n  }\n\n}\n\nexport default StoreProcedure;\n","export default function reduxes(actionTypes: Array<{ name: string }>): any {\n    const actionArray = actionTypes.map((actionType: any) => {\n      const initialState: any = actionType.initialState\n        ? actionType.initialState\n        : [];\n      return {\n        [actionType.name]: function Reducers(\n          state: {} | [] = initialState,\n          action: { type: string; payload: any }\n        ): {} | [] {\n          switch (action.type) {\n            case actionType.name:\n              if (!action.payload) {\n                return {};\n              }else if (actionType.pagination) {\n                return [...initialState, ...action.payload];\n              } else {\n                return {...state, ...action.payload};\n              }\n            default:\n              return { ...state };\n          }\n        }\n      };\n    });\n    let actionObject = {};\n    actionArray.forEach((item: {}): void => {\n      actionObject = { ...actionObject, ...item };\n    });\n    return actionObject;\n  }\n  ","export const resetApp = 'RESET_APP';"],"sourceRoot":""}